#!/bin/bash

set -e

: ${PORT:="3666"}

npm run clean
NODE_ENV=production npm run copy

DIST=".bin/public"
DOMAIN="https://ponyfoo.com"
ALL_CSS="$DIST/css/all.css"
CRITICAL_CSS=".bin/temp/critical.css"

browserify_standalone() {
  browserify $2 \
    --standalone $1 \
    --plugin bundle-collapser/plugin \
    | uglifyjs \
      --mangle \
      --compress "comparisons=false,keep_fargs=true,unsafe=true,unsafe_comps=true,warnings=false" \
      --beautify "ascii_only=true,beautify=false" \
      --output $3
}
browserify_alone() {
  browserify $1 \
    --plugin bundle-collapser/plugin \
    | uglifyjs \
      --mangle \
      --compress "comparisons=false,keep_fargs=true,unsafe=true,unsafe_comps=true,warnings=false" \
      --beautify "ascii_only=true,beautify=false" \
      --output $2
}
uglifyjs_alone() {
  uglifyjs $1 \
    --mangle \
    --compress "comparisons=false,keep_fargs=true,unsafe=true,unsafe_comps=true,warnings=false" \
    --beautify "ascii_only=true,beautify=false" \
    --output $2
}

# compile assets, routes
stylus client/css/all.styl -o $DIST/css --include-css --include client/css --compress
stylus client/css/newsletter.styl -o .bin/emails --include-css --include client/css --compress
jadum views/**/*.jade -o .bin --no-debug --obj '{"basedir":"views"}'
jadum resources/**/*.jade -o .bin --no-debug --obj '{"basedir":"resources"}'
taunus -o
NODE_ENV=production node lib/env BROWSER_ENV | jq . > .env.browser.json

# deferred libraries
browserify_standalone "weekly-compiler" "services/weeklyCompiler.js" ".bin/public/js/weekly-compiler.js"
browserify_standalone "rome" "node_modules/rome" ".bin/public/js/rome.js"
browserify_standalone "d3" "node_modules/d3" ".bin/public/js/d3.js"
browserify_standalone "d3-tip" "node_modules/d3-tip" ".bin/public/js/d3-tip.js"

# compile client-side app and service worker
browserify_alone "client/js/main.js" "$DIST/js/all.js"
browserify_alone "client/js/service-worker.js" "$DIST/service-worker.js"

# compile inlined scripts
browserify_alone "client/js/inline/fonts.js" ".bin/inline/fonts.js"
uglifyjs_alone ".bin/inline/javascript.js" ".bin/inline/javascript.js"
uglifyjs_alone ".bin/inline/styles.js" ".bin/inline/styles.js"

# critical css inlining
gather() { # endpoint, component_name
  CRITICAL="$(phantomjs node_modules/penthouse/penthouse.js http://localhost:$PORT$1 $ALL_CSS 1400 1100)"
  echo $CRITICAL | apartment -p "(.*)animation(.*),(.*)transition(.*)" | cleancss --s0 -o .bin/inlined/$2.css
  echo "penthouse: gathered css for $2"
}

LOGGING_LEVEL=warn PORT=$PORT APP_REBUILD=0 NODE_ENV=development node app &

# wait for app to listen on $PORT
while [ "$(lsof -i tcp:$PORT | grep -i listen)" == "" ]
do
  sleep 0.1
done

gather "/" "summaries"
gather "/account/login" "login"
gather "/articles/last" "article"
gather "/articles/history" "history"
gather "/articles/tagged/ponyfoo" "search"
gather "/not-found" "errors"

echo "penthouse: killing node app"
kill $! # kills `node app`
cleancss $ALL_CSS -o $ALL_CSS --s0

# asset hashing
reaver $DIST/img/* --manifest | scourge .bin/{views,resources,public/{css,js}} --base-path $DIST --domain $DOMAIN
reaver $DIST/{css,js}/* --consider $DIST/service-worker.js --manifest | scourge .bin/{inline,views/server,public} --base-path $DIST --domain $DOMAIN
reaver $DIST/service-worker.js --manifest | scourge $DIST/js --base-path $DIST --domain $DOMAIN
