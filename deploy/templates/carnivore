#!/bin/bash

echo "packer: pulling down mailtube"
cp -r /tmp/mailtube $HOME/app/mailtube

echo "packer: updating nginx configuration"
cp -r $HOME/app/mailtube/nginx $HOME/app/nginx

sed -i "s#{NGINX_USER}#$INSTANCE_USER#g" $HOME/app/nginx/nginx.conf
sed -i "s#{NGINX_WORKERS}#$NGINX_WORKERS#g" $HOME/app/nginx/nginx.conf
sed -i "s#{SERVER_NAME}#$SERVER_NAME#g" $HOME/app/nginx/site.conf
sed -i "s#{STATIC_ROOT}#$HOME/app/server/.bin/public#g" $HOME/app/nginx/site.conf
sed -i "s#{ANALYTICS_AUTH_FILE}#$HOME/app/nginx/htpasswd_analytics#g" $HOME/app/nginx/site.conf
sudo htpasswd -nb $ANALYTICS_USERNAME $ANALYTICS_PASSWORD > $HOME/app/nginx/htpasswd_analytics

sudo ln -sfn $HOME/app/nginx/nginx.conf /etc/nginx/nginx.conf
sudo ln -sfn $HOME/app/nginx/site.conf /etc/nginx/sites-enabled/$NAME.conf
sudo rm /etc/nginx/sites-enabled/default

echo "packer: updating logstash configuration"
cp -r $HOME/app/mailtube/logstash $HOME/app/logstash

sed -i "s#{SERVER_NAME}#$SERVER_NAME#g" $HOME/app/logstash/config/logstash.conf
sed -i "s#{NAME}#$NAME#g" $HOME/app/logstash/config/logstash.conf

sudo mkdir -p /opt/logstash/patterns
sudo ln -sfn $HOME/app/logstash/config/*.conf /etc/logstash/conf.d/
sudo ln -sfn $HOME/app/logstash/patterns/* /opt/logstash/patterns/

echo "packer: firing up nginx"
sudo service nginx restart || sudo service nginx start
sudo service nginx status

echo "packer: firing up elasticsearch"
sudo service elasticsearch restart || sudo service elasticsearch start
sudo service elasticsearch status

echo "packer: giving elasticsearch some runway, sleep 10s"
sleep 10s

echo "packer: ensuring access to nginx logfiles"
sudo chmod o+x /var/log/nginx

echo "packer: firing up logstash"
sudo service logstash restart || sudo service logstash start
sudo service logstash status

echo "packer: firing up kibana"
sudo service kibana restart || sudo service kibana start
sudo service kibana status

echo "packer: installing appserver daemon..."
echo "#!/bin/bash" > $HOME/app/start
echo ". $HOME/.nvm/nvm.sh" >> $HOME/app/start
echo "NODE_ENV=$NODE_ENV node $HOME/app/server/cluster.js" >> $HOME/app/start
chmod +x $HOME/app/start
cp $HOME/app/mailtube/init.d/appserver.conf $HOME/app/$NAME.conf
sed -i "s#{NAME}#$NAME#g" $HOME/app/$NAME.conf
sed -i "s#{DESCRIPTION}#Web application daemon service for $NAME#g" $HOME/app/$NAME.conf
sed -i "s#{USER}#$INSTANCE_USER#g" $HOME/app/$NAME.conf
sed -i "s#{COMMAND}#$HOME/app/start#g" $HOME/app/$NAME.conf
sudo mv $HOME/app/$NAME.conf /etc/init.d/$NAME
sudo chmod +x /etc/init.d/$NAME
sudo touch /var/log/$NAME.log
sudo chown $INSTANCE_USER /var/log/$NAME.log
sudo update-rc.d $NAME defaults

echo "packer: sourcing nvm"
. $HOME/.nvm/nvm.sh

echo "packer: moving uploaded server code"
mv /tmp/appserver $HOME/app/server

echo "packer: installing server dependencies"
mv $HOME/app/server/deploy/env/.env.$NODE_ENV.json $HOME/app/server/.env.json
mv $HOME/app/precache/node_modules $HOME/app/server/node_modules
cd $HOME/app/server
npm install --production

if [ $? -ne 0 ]
then
  echo "packer: npm install failed. bailing"
  exit 1
fi

echo "packer: pre-filling elasticsearch with articles"
node $HOME/app/server/scripts/articles-elasticsearch

echo "packer: booting appserver daemon..."
sudo service $NAME start

echo "packer: asserting application is functional..."
while [ "$(lsof -i tcp:$PORT | grep -i listen)" == "" ]
do
  sleep 0.1
done

echo "packer: application managed to listen on port $PORT"
echo "packer: setting up cron jobs"
crontab -l | { cat; echo "*/6 * * * * curl http://localhost:$PORT/api/`cat $HOME/app/server/.bin/secret`/scheduler"; } | crontab -
crontab -l | { cat; echo "0 */2 * * * curl http://localhost:$PORT/api/`cat $HOME/app/server/.bin/secret`/weeklies"; } | crontab -
crontab -l | { cat; echo "0 */6 * * * curl http://localhost:$PORT/api/`cat $HOME/app/server/.bin/secret`/remodel"; } | crontab -
crontab -l | { cat; echo "0 */8 * * * curl http://localhost:$PORT/api/`cat $HOME/app/server/.bin/secret`/twitter-leads"; } | crontab -
